import { AssemblyError } from "../AssemblyError"
import { ByteArray } from "../ByteArray"
import { Directive } from "../Directive"

/**
 * Executes the given `.word` command and returns two bytes array
 * representation generated by the command.
 * @param {Directive} command The command to execute.
 * @return {ByteArray} The byte array generated by the command.
 */
export function word(command: Directive): ByteArray {

    const { line, params } = command

    if (params.length === 0) {
        return null
    }

    const bytes = []

    params.forEach((param, index) => {
        if (param.isNumber()) {
            let value = param.data.value
            while (value > 0xff) {
                bytes.push(value & 0xff)
                value = value >>> 8
            }
            bytes.push(value)
        } else {
            throw new AssemblyError(
                `.word - invalid non-numeric parameter at index '${index}'`,
                line
            )
        }
    })

    return new ByteArray({ bytes, line })
}
