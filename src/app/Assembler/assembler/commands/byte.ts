import { AssemblyError } from "../AssemblyError"
import { ByteArray } from "../ByteArray"
import { Directive } from "../Directive"


/**
 * Executes the given `.byte` command and returns the intermediate byte array
 * representation generated by the command.
 * @param {Directive} command The command to execute.
 * @return {ByteArray} The byte array generated by the command.
 */
export function byte(command: Directive): ByteArray {

    const { line, params } = command

    if (params.length === 0) {
        return null
    }

    const bytes = []

    params.forEach((param, index) => {
        if (param.isNumber()) {
            let value = param.data.value
            while (value > 0xff) {
                bytes.push(value & 0xff)
                value = value >>> 8
            }
            bytes.push(value)
        } else if (param.isStringLiteral()) {
            param.data.value.split('').forEach((char, index) => {
                const code = char.charCodeAt(0)
                if (code > 255) {
                    throw new AssemblyError(
                        `.byte - encountered non-bytesized string literal character `
                        + `'${char}' at string index ${index}`,
                        line
                    )
                }
                bytes.push(code)
            })
        } else {
            throw new AssemblyError(
                `.byte - invalid non-numeric/string parameter at index '${index}'`,
                line
            )
        }
    })

    return new ByteArray({ bytes, line })
}